# -*- coding: utf-8 -*-
"""StockAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vlflOtO45Kk4x4F9G_xF3GTe2huGX2Kk
"""

# 🔸 STEP 1: PROPER IMPORTS
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime
import json
import time
from textblob import TextBlob


# CrewAI Multi-Agent Framework
from crewai import Agent, Task, Crew, Process
from crewai.tools import BaseTool
from pydantic import BaseModel
# from langchain_google_genai import GoogleGenerativeAI as genai
import requests
from mailing import StockAIEmailNotifier

# Load environment variables
from crewai import LLM

import os
from dotenv import load_dotenv

load_dotenv()
GEMINI_API_KEY = os.getenv('GOOGLE_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY') # ✨ ADDED


# Configure APIs
# GEMINI_API_KEY = userdata.get('GOOGLE_API_KEY')  # Get from ai.google.dev
# print(GEMINI_API_KEY)
# genai.configure(api_key=GEMINI_API_KEY)
# switch to 'gemini-pro'

# gemini_llm = ChatGoogleGenerativeAI(
#     model="gemini/gemini-1.5-flash",
#     verbose=True,
#     google_api_key=GEMINI_API_KEY
# )

from crewai import LLM

gemini_llm = LLM(
    model="gemini/gemini-2.5-flash",  # Use```5-flash, not 2.5-flash```
    api_key=GEMINI_API_KEY,
    temperature=0.5
)


print("🚀 Multi-Agent Environment Setup Complete!")

# 🔸 STEP 2: CUSTOM TOOLS FOR INDIAN STOCK DATA USING YFINANCE

class YFinanceIndianStockTool(BaseTool):
    name: str = "Indian Stock Data Fetcher"
    description: str = "Fetches comprehensive Indian stock data using yfinance with .NS suffix"

    def _run(self, symbol: str, period: str = "1y") -> dict:
        """
        Fetch Indian stock data with proper .NS suffix
        Args:
            symbol: Stock symbol (e.g., 'RELIANCE', 'TCS')
            period: Data period ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max')
        """
        try:
            # Add .NS suffix for NSE stocks
            if not symbol.endswith('.NS'):
                symbol = f"{symbol}.NS"

            print(f"📊 Fetching data for {symbol}...")

            # Create yfinance ticker object
            ticker = yf.Ticker(symbol)

            # Get basic info
            info = ticker.info

            # Get historical data
            hist_data = ticker.history(period=period)

            # Get current price (most recent)
            current_price = hist_data['Close'].iloc[-1] if not hist_data.empty else 0

            # Calculate basic metrics
            if len(hist_data) >= 20:
                ma_20 = hist_data['Close'].rolling(20).mean().iloc[-1]
                volatility = hist_data['Close'].pct_change().std() * np.sqrt(252) * 100  # Annualized volatility
            else:
                ma_20 = current_price
                volatility = 0

            # Get financial data
            financials = ticker.financials
            balance_sheet = ticker.balance_sheet

            result = {
                'symbol': symbol,
                'company_name': info.get('longName', symbol),
                'current_price': float(current_price),
                'currency': info.get('currency', 'INR'),
                'market_cap': info.get('marketCap', 0),
                'pe_ratio': info.get('trailingPE'),
                'price_to_book': info.get('priceToBook'),
                'debt_to_equity': info.get('debtToEquity'),
                'return_on_equity': info.get('returnOnEquity'),
                'profit_margin': info.get('profitMargins'),
                'revenue_growth': info.get('revenueGrowth'),
                'sector': info.get('sector'),
                'industry': info.get('industry'),
                'ma_20': float(ma_20),
                'volatility': float(volatility),
                'volume': int(hist_data['Volume'].iloc[-1]) if not hist_data.empty else 0,
                'avg_volume': int(hist_data['Volume'].mean()) if not hist_data.empty else 0,
                'historical_data': hist_data.tail(60).to_dict(),  # Last 60 days
                'fetched_at': datetime.now().isoformat()
            }

            print(f"✅ Successfully fetched data for {symbol}")
            return result

        except Exception as e:
            error_msg = f"❌ Error fetching data for {symbol}: {str(e)}"
            print(error_msg)
            return {'error': error_msg, 'symbol': symbol}

class TechnicalAnalysisTool(BaseTool):
    name: str = "Technical Analysis Calculator"
    description: str = "Calculates comprehensive technical indicators for stock analysis"

    def _run(self, symbol: str, historical_data: dict) -> dict:
        """Calculate technical indicators from historical data"""
        try:
            print(f"🔧 Calculating technical indicators for {symbol}...")

            # Convert dict back to DataFrame
            df = pd.DataFrame(historical_data)
            if df.empty:
                return {'error': 'No historical data available'}

            # Ensure we have enough data
            if len(df) < 20:
                return {'error': 'Insufficient data for technical analysis'}

            closes = df['Close']
            highs = df['High']
            lows = df['Low']
            volumes = df['Volume']

            # 1. RSI Calculation
            def calculate_rsi(prices, period=14):
                delta = prices.diff()
                gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
                loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
                rs = gain / loss
                return 100 - (100 / (1 + rs))

            current_rsi = float(calculate_rsi(closes).iloc[-1])

            # 2. Moving Averages
            ma_20 = float(closes.rolling(20).mean().iloc[-1])
            ma_50 = float(closes.rolling(50).mean().iloc[-1]) if len(closes) >= 50 else ma_20

            # 3. MACD
            exp1 = closes.ewm(span=12).mean()
            exp2 = closes.ewm(span=26).mean()
            macd_line = exp1 - exp2
            signal_line = macd_line.ewm(span=9).mean()
            histogram = macd_line - signal_line

            # 4. Bollinger Bands
            bb_period = 20
            sma = closes.rolling(bb_period).mean()
            std = closes.rolling(bb_period).std()
            upper_band = sma + (std * 2)
            lower_band = sma - (std * 2)

            # 5. Support and Resistance
            recent_lows = lows.tail(20).min()
            recent_highs = highs.tail(20).max()

            # 6. Volume Analysis
            avg_volume = volumes.mean()
            volume_ratio = volumes.iloc[-1] / avg_volume

            # 7. Generate Signals
            current_price = closes.iloc[-1]
            signals = []
            strength = 0

            # RSI Signals
            if current_rsi < 30:
                signals.append("RSI oversold - potential buy signal")
                strength += 1
            elif current_rsi > 70:
                signals.append("RSI overbought - potential sell signal")
                strength -= 1
            else:
                signals.append(f"RSI neutral at {current_rsi:.1f}")

            # Moving Average Signals
            if current_price > ma_20 > ma_50:
                signals.append("Price above both MAs - bullish trend")
                strength += 1
            elif current_price < ma_20 < ma_50:
                signals.append("Price below both MAs - bearish trend")
                strength -= 1

            # MACD Signals
            if macd_line.iloc[-1] > signal_line.iloc[-1] and histogram.iloc[-1] > 0:
                signals.append("MACD bullish crossover")
                strength += 1
            elif macd_line.iloc[-1] < signal_line.iloc[-1] and histogram.iloc[-1] < 0:
                signals.append("MACD bearish crossover")
                strength -= 1

            # Volume Signals
            if volume_ratio > 1.5:
                signals.append("High volume - strong interest")
                strength += 0.5
            elif volume_ratio < 0.5:
                signals.append("Low volume - weak interest")
                strength -= 0.5

            # Overall signal
            if strength >= 2:
                overall_signal = "BUY"
            elif strength <= -2:
                overall_signal = "SELL"
            else:
                overall_signal = "HOLD"

            result = {
                'symbol': symbol,
                'indicators': {
                    'rsi': current_rsi,
                    'ma_20': ma_20,
                    'ma_50': ma_50,
                    'macd': float(macd_line.iloc[-1]),
                    'macd_signal': float(signal_line.iloc[-1]),
                    'macd_histogram': float(histogram.iloc[-1]),
                    'bollinger_upper': float(upper_band.iloc[-1]),
                    'bollinger_lower': float(lower_band.iloc[-1]),
                    'support_level': float(recent_lows),
                    'resistance_level': float(recent_highs),
                    'volume_ratio': float(volume_ratio)
                },
                'signals': signals,
                'overall_signal': overall_signal,
                'signal_strength': float(strength),
                'analysis_timestamp': datetime.now().isoformat()
            }

            print(f"✅ Technical analysis complete for {symbol}")
            return result

        except Exception as e:
            error_msg = f"❌ Technical analysis error for {symbol}: {str(e)}"
            print(error_msg)
            return {'error': error_msg, 'symbol': symbol}

class NewsSentimentTool(BaseTool):
    name: str = "Live News Sentiment Analyzer"
    description: str = "Fetches and analyzes real-time news sentiment for Indian stocks using NewsAPI."

    def _run(self, symbol: str, company_name: str) -> dict:
        """Analyze live news sentiment for a given stock."""
        if not NEWS_API_KEY:
            return {'error': 'NEWS_API_KEY is not configured in the .env file.'}
        
        print(f"📰 Fetching and analyzing live news for {company_name}...")
        
        # Prepare search query
        query = f'"{company_name}" OR "{symbol.replace(".NS", "")}"'
        url = (f"https://newsapi.org/v2/everything?"
               f"q={query}&"
               f"language=en&"
               f"sortBy=publishedAt&"
               f"pageSize=20&" # Get top 20 recent articles
               f"apiKey={NEWS_API_KEY}")

        try:
            response = requests.get(url)
            response.raise_for_status() # Raise an exception for bad status codes
            articles = response.json().get('articles', [])

            if not articles:
                print(f"🟡 No recent news found for {company_name}.")
                return {'error': 'No articles found', 'symbol': symbol}

            sentiment_scores = []
            for article in articles:
                blob = TextBlob(article['title'] + ". " + article['description'] if article['description'] else article['title'])
                sentiment_scores.append(blob.sentiment.polarity)

            avg_sentiment = np.mean(sentiment_scores)

            if avg_sentiment > 0.15: overall_sentiment = 'Bullish'
            elif avg_sentiment < -0.15: overall_sentiment = 'Bearish'
            else: overall_sentiment = 'Neutral'

            result = {
                'symbol': symbol,
                'articles_analyzed': len(articles),
                'average_sentiment_score': float(avg_sentiment),
                'overall_sentiment': overall_sentiment,
            }

            print(f"✅ Sentiment analysis complete for {symbol}: {overall_sentiment}")
            return result

        except requests.exceptions.RequestException as e:
            error_msg = f"❌ News API request error for {symbol}: {str(e)}"
            print(error_msg)
            return {'error': error_msg, 'symbol': symbol}
        except Exception as e:
            error_msg = f"❌ Sentiment analysis error for {symbol}: {str(e)}"
            print(error_msg)
            return {'error': error_msg, 'symbol': symbol}


# 🔸 STEP 3: CREATE SPECIALIZED AI AGENTS USING CREWAI

# Data Collection Agent flash
data_collection_agent = Agent(
    role='Senior Data Collection Specialist',
    goal='Fetch comprehensive and accurate stock market data for Indian equities using yfinance',
    backstory="""You are an expert data collection specialist with deep knowledge of Indian stock markets.
    You know how to handle NSE stock symbols, understand market data structures, and can identify data quality issues.
    You're meticulous about data accuracy and always validate the information you collect.""",
    tools=[YFinanceIndianStockTool()],
    verbose=True,
    allow_delegation=False,
    llm=gemini_llm
)

# Technical Analysis Agent  flash
technical_analysis_agent = Agent(
    role='Senior Technical Analysis Expert',
    goal='Perform comprehensive technical analysis and generate trading signals based on price action and indicators',
    backstory="""You are a seasoned technical analyst with 15+ years of experience in Indian stock markets.
    You specialize in RSI, MACD, Moving Averages, Bollinger Bands, and volume analysis. You can identify chart patterns,
    support/resistance levels, and generate clear buy/sell signals with confidence levels.""",
    tools=[TechnicalAnalysisTool()],
    verbose=True,
    allow_delegation=False,
    llm=gemini_llm
)

# Fundamental Analysis Agent pro
fundamental_analysis_agent = Agent(
    role='Senior Fundamental Analysis Expert',
    goal='Analyze company financials, ratios, and business fundamentals to assess investment quality',
    backstory="""You are a CFA charterholder with expertise in Indian corporate finance and accounting standards.
    You excel at analyzing P/E ratios, debt-to-equity, ROE, profit margins, and revenue growth. You understand
    sector-specific metrics and can evaluate company quality for long-term investment.""",
    verbose=True,
    allow_delegation=False,
    llm=gemini_llm  # Use Pro for complex analysis
)

# News Sentiment Agent flash
news_sentiment_agent = Agent(
    role='Market Sentiment Analysis Specialist',
    goal='Analyze news sentiment and market mood to gauge investor sentiment and potential market impact',
    backstory="""You are an expert in financial sentiment analysis and behavioral finance. You understand how
    news impacts Indian stock markets, can interpret market sentiment, and know how to weight different news sources.
    You're skilled at identifying sentiment-driven price movements and their sustainability.""",
    tools=[NewsSentimentTool()],
    verbose=True,
    allow_delegation=False,
    llm=gemini_llm
)

# Risk Assessment Agent pro
risk_assessment_agent = Agent(
    role='Risk Management and Portfolio Specialist',
    goal='Assess investment risks, calculate position sizing, and provide risk management recommendations',
    backstory="""You are a risk management expert with deep knowledge of Indian market volatility, correlation patterns,
    and portfolio theory. You specialize in VaR calculations, drawdown analysis, and position sizing strategies.
    You understand sector risks, market cap considerations, and liquidity constraints in Indian markets.""",
    verbose=True,
    allow_delegation=False,
    llm=gemini_llm
)

# Final Recommendation Agent pro
recommendation_synthesis_agent = Agent(
    role='Chief Investment Strategist',
    goal='Synthesize all analyses into final investment recommendations with specific targets and stop-losses',
    backstory="""You are a seasoned portfolio manager and investment strategist with 20+ years in Indian markets.
    You excel at synthesizing technical, fundamental, and sentiment analysis into actionable investment decisions.
    You provide clear BUY/HOLD/SELL recommendations with specific price targets, stop-losses, and position sizes.""",
    verbose=True,
    allow_delegation=False,
    llm=gemini_llm
)

print("🤖 All AI Agents Created Successfully!")

# 🔸 STEP 4: CREATE TASKS FOR EACH AGENT

def create_stock_analysis_tasks(symbol, company_name=None):
    """Create a complete set of tasks for stock analysis"""

    if not company_name:
        company_name = symbol

    # Task 1: Data Collection
    data_collection_task = Task(
        description=f"""
        Collect comprehensive stock data for {symbol} ({company_name}) including:
        1. Current stock price and basic company information
        2. Historical price data for the last 1 year
        3. Financial ratios (P/E, P/B, Debt-to-Equity, ROE)
        4. Volume data and trading statistics
        5. Sector and industry classification

        Use the Indian Stock Data Fetcher tool to get NSE data via yfinance.
        Ensure data quality and completeness before proceeding.
        """,
        agent=data_collection_agent,
        expected_output="Complete stock data in JSON format with all requested metrics"
    )

    # Task 2: Technical Analysis
    technical_analysis_task = Task(
        description=f"""
        Perform comprehensive technical analysis for {symbol} using the historical data:
        1. Calculate RSI, MACD, Moving Averages (20, 50-day)
        2. Identify Bollinger Bands and current price position
        3. Determine support and resistance levels
        4. Analyze volume patterns and trends
        5. Generate clear BUY/HOLD/SELL signals with reasoning

        Use the Technical Analysis Calculator tool and provide detailed insights.
        """,

        agent=technical_analysis_agent,
        expected_output="Technical analysis report with indicators, signals, and recommendations",
        context=[data_collection_task]  # Depends on data collection
    )

    # Task 3: Fundamental Analysis
    fundamental_analysis_task = Task(
        description=f"""
        Analyze the fundamental metrics for {symbol} ({company_name}):
        1. Evaluate P/E ratio relative to industry average
        2. Assess debt-to-equity and financial health
        3. Analyze ROE, profit margins, and efficiency metrics
        4. Consider revenue growth and business quality
        5. Provide valuation assessment (undervalued/overvalued/fairly valued)

        Focus on long-term investment quality and financial stability.
        """,
        agent=fundamental_analysis_agent,
        expected_output="Fundamental analysis report with financial health assessment and valuation",
        context=[data_collection_task]
    )

    # Task 4: Sentiment Analysis
    sentiment_analysis_task = Task(
        description=f"""
        Analyze market sentiment for {symbol} ({company_name}):
        1. Collect and analyze recent news headlines
        2. Determine overall sentiment (bullish/bearish/neutral)
        3. Assess sentiment strength and reliability
        4. Consider potential impact on stock price
        5. Provide sentiment-based trading insights

        Use the News Sentiment Analyzer tool for comprehensive analysis.
        """,
        agent=news_sentiment_agent,
        expected_output="Sentiment analysis report with overall sentiment classification and impact assessment",
        context=[data_collection_task]
    )

    # Task 5: Risk Assessment
    risk_assessment_task = Task(
        description=f"""
        Perform risk assessment for {symbol} investment:
        1. Calculate stock volatility and beta (if available)
        2. Assess liquidity risk based on volume data
        3. Evaluate sector and company-specific risks
        4. Recommend appropriate position sizing (% of portfolio)
        5. Suggest risk management strategies

        Consider all available data to provide comprehensive risk evaluation.
        """,
        agent=risk_assessment_agent,
        expected_output="Risk assessment report with risk level, position sizing, and risk management recommendations",
        context=[data_collection_task, technical_analysis_task]
    )

    # Task 6: Final Recommendation
    final_recommendation_task = Task(
        description=f"""
        Synthesize all analyses for {symbol} ({company_name}) into final investment recommendation:

        Consider inputs from:
        - Technical analysis signals and momentum
        - Fundamental valuation and financial health
        - Market sentiment and news impact
        - Risk assessment and volatility

        Provide:
        1. Clear recommendation: BUY/HOLD/SELL
        2. Target price (3-6 month outlook)
        3. Stop-loss level for risk management
        4. Confidence level (1-10 scale)
        5. Key reasons supporting the recommendation
        6. Position sizing recommendation (% of portfolio)
        7. Time horizon for the investment

        Format the final recommendation clearly with specific action items.
        """,
        agent=recommendation_synthesis_agent,
        expected_output="Final investment recommendation with BUY/HOLD/SELL decision, target price, stop-loss, and detailed reasoning",
        context=[data_collection_task, technical_analysis_task, fundamental_analysis_task,
                sentiment_analysis_task, risk_assessment_task]
    )

    return [data_collection_task, technical_analysis_task, fundamental_analysis_task,
            sentiment_analysis_task, risk_assessment_task, final_recommendation_task]

print("📋 Task Creation Function Ready!")

# 🔸 STEP 5: CREATE AND EXECUTE MULTI-AGENT CREW

# gemini_llm = ChatGoogleGenerativeAI(
#     model="gemini-pro",
#     verbose=True,
#     temperature=0.5,
#     google_api_key=os.getenv("GOOGLE_API_KEY") # Ensure this is correctly set
# )

def analyze_stock_with_multi_agents(symbol, company_name=None):
    """
    Complete multi-agent stock analysis
    """
    print(f"\n🚀 Starting Multi-Agent Analysis for {symbol}")
    print("=" * 80)

    # Create tasks
    tasks = create_stock_analysis_tasks(symbol, company_name)

    # Create crew with all agents
    stock_analysis_crew = Crew(
        agents=[
            data_collection_agent,
            technical_analysis_agent,
            fundamental_analysis_agent,
            news_sentiment_agent,
            risk_assessment_agent,
            recommendation_synthesis_agent
        ],
        tasks=tasks,
        llm=gemini_llm,
        process=Process.sequential,  # Tasks execute in order with dependencies
        verbose=True,
    #     # memory=True  # Agents can remember previous interactions
    )

    # Execute the crew
    print(f"🤖 Deploying {len(stock_analysis_crew.agents)} AI agents for analysis...")

    try:
        # Kickoff the crew execution
        result = stock_analysis_crew.kickoff()
        # result= "testiong mail"

        print("\n" + "=" * 80)
        print("🎯 MULTI-AGENT ANALYSIS COMPLETE!")
        print("=" * 80)
        print(result)

        email_notifier = StockAIEmailNotifier()

        final_result = {
            'symbol': symbol,
            'analysis_result': result,
            'timestamp': datetime.now().isoformat(),
            'agents_used': len(stock_analysis_crew.agents),
            'tasks_completed': len(tasks)
        }
        email_notifier.send_email(final_result, symbol)
        
        return final_result

    except Exception as e:
        error_msg = f"❌ Crew execution error: {str(e)}"
        print(error_msg)
        return {'error': error_msg, 'symbol': symbol}

# 🔸 EXAMPLE USAGE - ANALYZE INDIAN STOCKS

# Analyze single stock
print("🔥 STARTING MULTI-AGENT STOCK ANALYSIS")
# result = analyze_stock_with_multi_agents("JIOFIN", "Jio Financial Services Ltd")

# Analyze multiple stocks (uncomment to run)

# indian_stocks = {
#     "TATAMOTORS": "TATA Motors Ltd",
#     "RADICO": "Radico Khaitan Ltd",
#     "BERGEPAINT": "Berger Paints India Ltd",
#     "PIDILITIND": "Pidilite Industries Ltd",
#     "NAVINFLUOR": "Navin Fluorine International Limited",
#     "SHARDACROP": "Sharda Cropchem Ltd",
#     "CGPOWER": "CG Power and Industrial Solutions Ltd"
# }

# for symbol, company_name in indian_stocks.items():
#     print(f"\n{'='*60}")
#     print(f"Analyzing {symbol}...")
#     result = analyze_stock_with_multi_agents(symbol, company_name)

#     # Rate limiting to respect API limits
#     time.sleep(10)  # Wait 10 seconds between stocks

# gemini_llm = LLM(
#     model="gemini/gemini-2.5-flash",
#     verbose=True,
#     google_api_key=GEMINI_API_KEY
# )

# print(gemini_llm)


# try:
#     test_response = gemini_llm.invoke("Hello, test message")
#     print("✅ LLM working:", test_response.content[:50])
# except Exception as e:
#     print("❌ LLM test failed:", str(e))

